---
interface Props {
  variant: "default" | "backdrop";
  color: "primary" | "accent" | "white" | "black";
  forHero?: boolean;
  href: string;
}

const { variant, color, forHero = false, href } = Astro.props;

const defaultClasses = {
  primary: "border-primary text-primary hover:bg-primary hover:text-content",
  accent: "border-accent text-accent hover:bg-accent hover:text-base-color",
  white: "border-white text-white hover:bg-white hover:text-base-color",
  black: "border-black text-black hover:bg-black hover:text-primary",
};

const backdropClasses = {
  primary: "border-primary text-primary",
  accent: "border-accent text-accent",
  white: "border-white text-white",
  black: "border-black text-black",
};
---

<div
  class={`${variant === "default" ? "" : `backdrop-${color}`}  relative inline-block`}
>
  <a
    href={href}
    class={`${variant === "default" ? defaultClasses[color] : backdropClasses[color]} ${forHero ? "bg-primary" : "bg-base-color"} text-xs font-bold py-3 px-16 border flex w-fit ease-in-out duration-200 transition relative z-10`}
  >
    <slot />
  </a>
</div>

<style>
  .backdrop-primary,
  .backdrop-accent,
  .backdrop-white,
  .backdrop-black {
    position: relative;
  }

  .backdrop-primary::before,
  .backdrop-accent::before,
  .backdrop-white::before,
  .backdrop-black::before {
    content: "";
    position: absolute;
    top: 3px;
    left: 3px;
    width: 100%;
    height: 100%;
    opacity: 1;
    transition: transform 0.2s;
    z-index: 1;
  }

  .backdrop-primary::before {
    background-color: var(--primary);
  }

  .backdrop-accent::before {
    background-color: var(--accent);
  }

  .backdrop-white::before {
    background-color: #ffffff;
  }

  .backdrop-black::before {
    background-color: #000000;
  }

  .backdrop-primary:hover::before,
  .backdrop-accent:hover::before,
  .backdrop-white:hover::before,
  .backdrop-black:hover::before {
    @apply translate-x-0.5 translate-y-0.5;
  }
</style>
