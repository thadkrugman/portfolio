---
interface Props {
  useDarkHeader?: boolean
}

const { useDarkHeader = false } = Astro.props

const navItems = [
  { name: 'Home', href: '/' },
  { name: 'About', href: '/about' },
  { name: 'Portfolio', href: '/portfolio' },
  { name: 'Blog', href: 'blog' },
  { name: 'Contact', href: '/contact' },
]
---

<header
  class={`${useDarkHeader ? 'bg-secondary' : 'bg-primary'} h-20 sm:h-24 md:h-28 relative overflow-x-hidden`}
>
  <nav
    class='md:relative mx-auto flex container items-center h-full w-full justify-between md:justify-end pl-0'
    aria-label='Global'
  >
    <a
      href='#'
      class={`${useDarkHeader ? 'text-secondary-accent-dark' : 'text-primary-accent'} md:absolute top-0 left-0 md:-left-[200px] z-0 text-[10vw] md:text-9xl syne font-bold md:-mt-5`}
    >
      Thad&nbsp;Krugman
    </a>
    <div class='flex md:hidden'>
      <button
        type='button'
        id='openDrawerBtn'
        class='-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700 z-20'
      >
        <span class='sr-only'>Open main menu</span>
        <svg
          class='h-6 w-6'
          fill='none'
          viewBox='0 0 24 24'
          stroke-width='1.5'
          stroke='currentColor'
          aria-hidden='true'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            d='M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5'></path>
        </svg>
      </button>
    </div>
    <div
      class={`${useDarkHeader ? 'border-secondary-content text-secondary-content' : 'border-primary-content text-primary-content'} hidden md:flex md:gap-x-6 z-10 border-b py-2 syne`}
    >
      <a href='#' class='text-2xl font-bold hover:opacity-70'>Thad Krugman</a>
      <span>/</span>
      <a href='#' class='text-xl font-light hover:opacity-70'>About</a>
      <span>/</span>
      <a href='#' class='text-xl font-light hover:opacity-70'>Portfolio</a>
      <span>/</span>
      <a href='#' class='text-xl font-light hover:opacity-70'>Blog</a>
      <span>/</span>
      <a href='#' class='text-xl font-light hover:opacity-70'>Contact</a>
    </div>
  </nav>
  <!-- Mobile menu, show/hide based on menu open state. -->
  <div
    class='bg-black/50 md:hidden flex flex-col items-end fixed inset-y-0 right-0 w-full overflow-y-auto transform transition-opacity duration-300 ease-in-out z-10 opacity-0'
    role='dialog'
    aria-modal='true'
    id='drawer-bg'
  >
  </div>
  <div
    id='drawer'
    class='fixed inset-y-0 right-0 bg-secondary w-full max-w-[340px] h-full md:hidden flex flex-col transform transition-transform duration-300 ease-in-out translate-x-full z-30 px-4 py-6'
  >
    <div class='flex items-center justify-between'>
      <a href='/' class='text-3xl font-semibold'>: )</a>
      <button
        type='button'
        class='h-8 w-8 text-base-content'
        id='closeDrawerBtn'
      >
        <span class='sr-only'>Close menu</span>
        <svg
          class='h-8 w-8'
          fill='none'
          viewBox='0 0 24 24'
          stroke-width='1.8'
          stroke='currentColor'
          aria-hidden='true'
        >
          <path
            stroke-linecap='round'
            stroke-linejoin='round'
            d='M6 18L18 6M6 6l12 12'></path>
        </svg>
      </button>
    </div>
    <div class='flex flex-col'>
      {
        navItems.map((item) => (
          <div class='border-b border-b-secondary-accent-dark py-4'>
            <a
              class='text-4xl font-normal text-secondary-content syne px-2'
              href={item.href}
            >
              {item.name}
            </a>
          </div>
        ))
      }
    </div>
  </div>
</header>

<script>
  const drawer = document.getElementById('drawer') as HTMLElement
  const drawerBg = document.getElementById('drawer-bg') as HTMLElement
  const openDrawerBtn = document.getElementById('openDrawerBtn') as HTMLElement
  const closeDrawerBtn = document.getElementById(
    'closeDrawerBtn',
  ) as HTMLElement

  openDrawerBtn?.addEventListener('click', () => {
    drawer?.classList.remove('translate-x-full')
    drawerBg?.classList.remove('opacity-0')
    drawerBg?.classList.add('opacity-100')
  })

  closeDrawerBtn?.addEventListener('click', () => {
    drawer?.classList.add('translate-x-full')
    drawerBg?.classList.remove('opacity-100')
    drawerBg?.classList.add('opacity-0')
  })
</script>
